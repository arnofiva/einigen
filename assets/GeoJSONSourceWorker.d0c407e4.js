import{jk as g,a3 as _,ps as C,ca as D,iz as $,p as v,au as Q,b4 as Z,jE as G,pt as P,bZ as A,e6 as x,pu as M,pv as z,pw as N}from"./index.da161cf1.js";import{m as B}from"./FeatureStore.e774d369.js";import{e as L,f as E,g as F}from"./QueryEngine.f42b4b13.js";import{L as J,I as U,T as V}from"./geojson.91d0658d.js";import{o as W,a as H,i as Y}from"./clientSideDefaults.f7f5ffde.js";import{y as K,d as b,c as w,u as I,h as q}from"./sourceUtils.7f114829.js";import{r as S}from"./FieldsIndex.09813895.js";import"./BoundsStore.13c0920f.js";import"./PooledRBush.b9188fbe.js";import"./quickselect.b8e0afc3.js";import"./optimizedFeatureQueryEngineAdapter.b17e3ee2.js";import"./centroid.66ea1f85.js";import"./normalizeUtils.54c24a4d.js";import"./normalizeUtilsCommon.87227ae2.js";import"./WhereClause.c0b1e923.js";import"./executionError.10e29c03.js";import"./json.7bed7e43.js";import"./QueryEngineCapabilities.a6a6a20b.js";import"./utils.8873e24e.js";import"./generateRendererUtils.e8dfecdf.js";import"./defaultsJSON.a416f32c.js";const X={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class be{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const s=await this._fetch(e);return this._createFeatures(s)}}destroy(){this._queryEngine?.destroy(),this._queryEngine=this._fieldsIndex=this._createDefaultAttributes=null}async load(e,s={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const n=[];await this._checkProjection(e.spatialReference);let i=null;e.url&&(i=await this._fetch(s?.signal));const r=J(i,{geometryType:e.geometryType}),o=e.fields||r.fields||[],l=e.hasZ!=null?e.hasZ:r.hasZ,d=r.geometryType;let c=e.objectIdField||r.objectIdFieldName||"__OBJECTID";const y=e.spatialReference||g;let t=e.timeInfo;o===r.fields&&r.unknownFields.length>0&&n.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:r.unknownFields}});let u=new S(o).get(c);u?(u.type!=="esriFieldTypeString"&&(u.type="esriFieldTypeOID"),u.editable=!1,u.nullable=!1,c=u.name):(u={alias:c,name:c,type:r.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},o.unshift(u));const h={};for(const a of o){if(a.name==null&&(a.name=a.alias),a.alias==null&&(a.alias=a.name),!a.name)throw new _("geojson-layer:invalid-field-name","field name is missing",{field:a});if(!C.jsonValues.includes(a.type))throw new _("geojson-layer:invalid-field-type",`invalid type for field "${a.name}"`,{field:a});if(a.name!==u.name){const f=D(a);f!==void 0&&(h[a.name]=f)}}this._fieldsIndex=new S(o);const p=this._fieldsIndex.requiredFields.indexOf(u);if(p>-1&&this._fieldsIndex.requiredFields.splice(p,1),t){if(t.startTimeField){const a=this._fieldsIndex.get(t.startTimeField);a?(t.startTimeField=a.name,a.type="esriFieldTypeDate"):t.startTimeField=null}if(t.endTimeField){const a=this._fieldsIndex.get(t.endTimeField);a?(t.endTimeField=a.name,a.type="esriFieldTypeDate"):t.endTimeField=null}if(t.trackIdField){const a=this._fieldsIndex.get(t.trackIdField);a?t.trackIdField=a.name:(t.trackIdField=null,n.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:t}}))}t.startTimeField||t.endTimeField||(n.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:t}}),t=null)}const R=d?W(d):void 0,m={warnings:n,featureErrors:[],layerDefinition:{...X,drawingInfo:R??void 0,templates:H(h),extent:void 0,geometryType:d,objectIdField:c,fields:o,hasZ:!!l,timeInfo:t}};this._queryEngine=new L({fields:o,geometryType:d,hasM:!1,hasZ:l,objectIdField:c,spatialReference:y,timeInfo:t,featureStore:new B({geometryType:d,hasM:!1,hasZ:l}),cacheSpatialQueries:!0}),this._createDefaultAttributes=Y(h,c);const T=await this._createFeatures(i);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,T);const k=this._normalizeFeatures(T,m.warnings,m.featureErrors);this._queryEngine.featureStore.addMany(k);const{fullExtent:O,timeExtent:j}=await this._queryEngine.fetchRecomputedExtents();if(m.layerDefinition.extent=O,j){const{start:a,end:f}=j;m.layerDefinition.timeInfo.timeExtent=[a,f]}return m}async applyEdits(e){const{spatialReference:s,geometryType:n}=this._queryEngine;return await Promise.all([K(s,n),E(e.adds,s),E(e.updates,s)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},s={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,s.signal)}async queryFeatureCount(e={},s={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,s.signal)}async queryObjectIds(e={},s={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,s.signal)}async queryExtent(e={},s={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,s.signal)}async querySnapping(e,s={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,s.signal)}async refresh(e){this._loadOptions.customParameters=e,this._snapshotTask?.abort(),this._snapshotTask=$(this._snapshotFeatures),this._snapshotTask.promise.then(i=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,i);const r=this._normalizeFeatures(i);r&&this._queryEngine.featureStore.addMany(r)},i=>{this._queryEngine.featureStore.clear(),v(i)||Q.getLogger("esri.layers.GeoJSONLayer").error(new _("geojson-layer:refresh","An error occurred during refresh",{error:i}))}),await this._waitSnapshotComplete();const{fullExtent:s,timeExtent:n}=await this._queryEngine.fetchRecomputedExtents();return{extent:s,timeExtent:n}}async _createFeatures(e){if(e==null)return[];const{geometryType:s,hasZ:n,objectIdField:i}=this._queryEngine,r=U(e,{geometryType:s,hasZ:n,objectIdField:i});if(!Z(this._queryEngine.spatialReference,g))for(const o of r)o.geometry!=null&&(o.geometry=G(F(P(o.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),g,this._queryEngine.spatialReference)));return r}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:s,customParameters:n}=this._loadOptions,i=(await A(s,{responseType:"json",query:{...n},signal:e})).data;return await V(i),i}_normalizeFeatures(e,s,n){const{objectIdField:i}=this._queryEngine,r=[];for(const o of e){const l=this._createDefaultAttributes(),d=b(this._fieldsIndex,l,o.attributes,!0,s);d?n?.push(d):(this._assignObjectId(l,o.attributes,!0),o.attributes=l,o.objectId=l[i],r.push(o))}return r}async _applyEdits(e){const{adds:s,updates:n,deletes:i}=e,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(s&&s.length&&this._applyAddEdits(r,s),n&&n.length&&this._applyUpdateEdits(r,n),i&&i.length){for(const d of i)r.deleteResults.push(w(d));this._queryEngine.featureStore.removeManyById(i)}const{fullExtent:o,timeExtent:l}=await this._queryEngine.fetchRecomputedExtents();return{extent:o,timeExtent:l,featureEditResults:r}}_applyAddEdits(e,s){const{addResults:n}=e,{geometryType:i,hasM:r,hasZ:o,objectIdField:l,spatialReference:d,featureStore:c}=this._queryEngine,y=[];for(const t of s){if(t.geometry&&i!==x(t.geometry)){n.push(I("Incorrect geometry type."));continue}const u=this._createDefaultAttributes(),h=b(this._fieldsIndex,u,t.attributes);if(h)n.push(h);else{if(this._assignObjectId(u,t.attributes),t.attributes=u,t.uid!=null){const p=t.attributes[l];e.uidToObjectId[t.uid]=p}if(t.geometry!=null){const p=t.geometry.spatialReference??d;t.geometry=F(q(t.geometry,p),p,d)}y.push(t),n.push(w(t.attributes[l]))}}c.addMany(M([],y,i,o,r,l))}_applyUpdateEdits({updateResults:e},s){const{geometryType:n,hasM:i,hasZ:r,objectIdField:o,spatialReference:l,featureStore:d}=this._queryEngine;for(const c of s){const{attributes:y,geometry:t}=c,u=y&&y[o];if(u==null){e.push(I(`Identifier field ${o} missing`));continue}if(!d.has(u)){e.push(I(`Feature with object id ${u} missing`));continue}const h=z(d.getFeature(u),n,r,i);if(t!=null){if(n!==x(t)){e.push(I("Incorrect geometry type."));continue}const p=t.spatialReference??l;h.geometry=F(q(t,p),p,l)}if(y){const p=b(this._fieldsIndex,h.attributes,y);if(p){e.push(p);continue}}d.add(N(h,n,r,i,o)),e.push(w(u))}}_createObjectIdGenerator(e,s){const n=e.fieldsIndex.get(e.objectIdField);if(n.type==="esriFieldTypeString")return()=>n.name+"-"+Date.now().toString(16);let i=Number.NEGATIVE_INFINITY;for(const r of s)r.objectId&&(i=Math.max(i,r.objectId));return i=Math.max(0,i)+1,()=>i++}_assignObjectId(e,s,n=!1){const i=this._queryEngine.objectIdField;e[i]=n&&i in s?s[i]:this._objectIdGenerator()}async _checkProjection(e){try{await E(g,e)}catch{throw new _("geojson-layer","Projection not supported")}}}export{be as default};
