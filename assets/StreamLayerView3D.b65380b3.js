import{e as r,y as o,a as l,c_ as P,dK as M,m as R,l as y,J as U,q as _,b as k,C as T,a3 as C}from"./index.da161cf1.js";import{o as x}from"./StreamFeatureManager.ae72b5b8.js";import{createConnection as $}from"./createConnection.6a562f88.js";import{r as E}from"./EventedSet.2b4d6c27.js";import{b as G}from"./Query.e586665e.js";import{E as j}from"./FeatureLikeLayerView3D.2804d5c7.js";import{n as V}from"./LayerView3D.a0f4cfd4.js";import{d as L}from"./LayerView.948860d4.js";import{d as F}from"./FeatureFilter.97dd33dd.js";import"./query.22cd43bf.js";import"./normalizeUtils.54c24a4d.js";import"./normalizeUtilsCommon.87227ae2.js";import"./pbfQueryUtils.c4418ce7.js";import"./pbf.82c57b62.js";import"./queryZScale.2643e684.js";import"./dehydratedFeatureComparison.d41240fc.js";import"./queryForSymbologySnapping.b7a5beb4.js";import"./elevationInfoUtils.d710f6c5.js";import"./hash.25af2a28.js";import"./diffUtils.f0876598.js";import"./UniqueValueRenderer.0143139a.js";import"./ColorStop.f762bde8.js";import"./colorRamps.80cb140e.js";import"./Graphics3DObjectStates.1983c1d0.js";import"./jsonUtils.4745b876.js";import"./DictionaryLoader.90c8c47c.js";import"./FieldsIndex.09813895.js";import"./heatmapUtils.32e9a30b.js";import"./defaults.83793da7.js";import"./defaultsJSON.a416f32c.js";import"./optimizedFeatureQueryEngineAdapter.b17e3ee2.js";import"./centroid.66ea1f85.js";import"./PooledRBush.b9188fbe.js";import"./quickselect.b8e0afc3.js";import"./popupUtils.5174221c.js";import"./floorFilterUtils.2fa4f3da.js";import"./QueryEngine.f42b4b13.js";import"./WhereClause.c0b1e923.js";import"./executionError.10e29c03.js";import"./json.7bed7e43.js";import"./QueryEngineCapabilities.a6a6a20b.js";import"./utils.8873e24e.js";import"./generateRendererUtils.e8dfecdf.js";import"./FeatureSet.97dc0f24.js";import"./FeatureStore.e774d369.js";import"./BoundsStore.13c0920f.js";import"./projectExtentUtils.4a1e869d.js";const N=2500;let p=class extends k{getObjectId(){return this.objectId}};r([o({type:Number,json:{read:!0}})],p.prototype,"objectId",void 0),p=r([l("esri.layers.graphics.controllers.StreamGraphic")],p);class J{constructor(t){this.onUpdate=t,this._idToGraphic=new Map}destroy(){this._idToGraphic.clear()}add(t){this._idToGraphic.set(t.objectId,t)}get(t){return this._idToGraphic.get(t)}forEach(t){this._idToGraphic.forEach(t)}removeById(t){const s=this._idToGraphic.get(t);return s?(s.sourceLayer=s.layer=null,this._idToGraphic.delete(t),s):null}update(t,s){this.onUpdate(t,s)}get size(){return this._idToGraphic.size}}let n=class extends P(M(R)){constructor(){super(...arguments),this.isPaused=!1,this.graphics=new E,this._updateInfo={websocket:0,client:0},this._updateIntervalId=null,this._outSpatialReference=null}initialize(){this.addResolvingPromise(this.layer.when(()=>this._startup()))}destroy(){this.clear()}_clearInterval(){this._updateIntervalId!==null&&(clearInterval(this._updateIntervalId),this._updateIntervalId=null)}clear(){this._clearInterval(),this.connection=y(this.connection),this.store=y(this.store),this.graphics.clear(),this.handles.removeAll()}get updating(){return!this.connection||this.connection.connectionStatus==="connected"}_startup(){const{layer:e,layerView:t}=this,{spatialReference:s,definitionExpression:c,geometryDefinition:d,objectIdField:h,timeInfo:f,purgeOptions:g,maxReconnectionAttempts:v,maxReconnectionInterval:I,customParameters:S}=e,w=e.geometryType?U.toJSON(e.geometryType):null,b=s,u=t.view.spatialReference,O={geometry:d,where:c};this.clear(),this._set("connection",$(e.parsedUrl,b,u,w,O,v,I,S??void 0)),this._outSpatialReference=u.toJSON(),this.store=new J(this._onUpdate.bind(this)),this.featuresManager=new x(this.store,h,f.toJSON(),g);const m="startup-watches";this.handles.remove(m),this.handles.add([e.on("send-message-to-socket",a=>this.connection.sendMessageToSocket(a)),e.on("send-message-to-client",a=>this.connection.sendMessageToClient(a)),this.connection.on("data-received",a=>this._onFeature(a)),this.connection.on("message-received",a=>this._onWebSocketMessage(a)),_(()=>[e.definitionExpression,e.geometryDefinition,e.purgeOptions],()=>this._startup())],m),this.isPaused||this._initUpdateInterval()}_onWebSocketMessage(e){if(this.layerView.emit("message-received",e),"type"in e)switch(e.type){case"delete":if(e.objectIds)for(const t of e.objectIds)this.featuresManager.removeById(t);if(e.trackIds)for(const t of e.trackIds)this.featuresManager.removeByTrackId(t);break;case"clear":this.store.forEach(t=>this.featuresManager.removeById(t.objectId))}}_onFeature(e){this._updateInfo.websocket++,this.layerView.hasEventListener("data-received")&&this.layerView.emit("data-received",{attributes:e.attributes,centroid:e.centroid,geometry:e.geometry});try{e.geometry==null||e.geometry.spatialReference||(e.geometry.spatialReference=this._outSpatialReference);const t=p.fromJSON(e);t.sourceLayer=t.layer=this.layer,this.featuresManager.add(t)}catch{}}_onUpdate(e,t){t!=null&&this.graphics.removeMany(t),e!=null&&(this._updateInfo.client+=e.length,this.graphics.addMany(e))}_initUpdateInterval(){this._clearInterval();const{updateInterval:e}=this.layer;let t=performance.now();this._updateIntervalId=setInterval(()=>{const s=performance.now(),c=s-t;if(c>N){t=s;const d=Math.round(this._updateInfo.client/(c/1e3)),h=Math.round(this._updateInfo.websocket/(c/1e3));this._updateInfo.client=0,this._updateInfo.websocket=0,this.layerView.emit("update-rate",{client:d,websocket:h})}this.featuresManager.checkForUpdates()},e)}pauseStream(){this.isPaused=!0,this._clearInterval()}resumeStream(){this.isPaused=!1,this._initUpdateInterval()}};r([o()],n.prototype,"isPaused",void 0),r([o({constructOnly:!0})],n.prototype,"layer",void 0),r([o({constructOnly:!0})],n.prototype,"layerView",void 0),r([o()],n.prototype,"connection",void 0),r([o({readOnly:!0})],n.prototype,"updating",null),n=r([l("esri.layers.graphics.controllers.StreamController")],n);const z=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}constructor(...s){super(...s),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return this._isUserPaused?"paused":this._streamConnectionStatus}_onSuspendedChange(s){s?this._doPause():this._isUserPaused||this._doResume()}};return r([o()],t.prototype,"_isUserPaused",void 0),r([o({readOnly:!0})],t.prototype,"connectionStatus",null),r([o({type:F})],t.prototype,"filter",void 0),t=r([l("esri.layers.mixins.StreamLayerView")],t),t};let i=class extends z(j(V(L))){constructor(){super(...arguments),this.type="stream-3d",this.updatePolicy=T.ASYNC,this.hasZ=!0,this.hasM=!1}initialize(){this.handles.add(_(()=>this.suspended,e=>{this.controller&&this._onSuspendedChange(e)}))}get connectionError(){const e=this.get("controller.connection.errorString");return e?new C("stream-controller",e):null}createQuery(){return new G({outFields:["*"],returnGeometry:!0,outSpatialReference:this.view.spatialReference})}queryLatestObservations(e,t){return this.queryEngine.executeQueryForLatestObservations(this._ensureQuery(e),t?.signal)}get _streamConnectionStatus(){return this.controller?.connection?.connectionStatus??"disconnected"}createController(){return new n({layer:this.layer,layerView:this})}beforeSetController(){}_doPause(){this.controller?.pauseStream()}_doResume(){this.controller?.resumeStream()}};r([o({readOnly:!0})],i.prototype,"updatePolicy",void 0),r([o({readOnly:!0})],i.prototype,"connectionError",null),r([o()],i.prototype,"controller",void 0),r([o({readOnly:!0})],i.prototype,"hasZ",void 0),r([o({readOnly:!0})],i.prototype,"hasM",void 0),r([o({readOnly:!0})],i.prototype,"_streamConnectionStatus",null),i=r([l("esri.views.3d.layers.StreamLayerView3D")],i);const je=i;export{je as default};
