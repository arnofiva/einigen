import{bZ as o,eu as _,dR as c,cw as f,bN as p}from"./index.da161cf1.js";import d from"./FeatureLayer.6ea98f03.js";class S{constructor(t,r,e,a){this._parsedUrl=t,this._portalItem=r,this._apiKey=e,this.signal=a,this._rootDocument=null;const n=this._parsedUrl?.path.match(/^(.*)\/SceneServer\/layers\/([\d]*)\/?$/i);n&&(this._urlParts={root:n[1],layerId:parseInt(n[2],10)})}async fetch(){if(!this._urlParts)return null;const t=this._portalItem??await this._portalItemFromServiceItemId();if(t==null)return this._loadFromUrl();const r=await this._findAndLoadRelatedPortalItem(t);return r==null?null:this._loadFeatureLayerFromPortalItem(r)}async fetchPortalItem(){if(!this._urlParts)return null;const t=this._portalItem??await this._portalItemFromServiceItemId();return t==null?null:this._findAndLoadRelatedPortalItem(t)}async _fetchRootDocument(){if(this._rootDocument!=null)return this._rootDocument;if(this._urlParts==null)return this._rootDocument={},{};const t={query:{f:"json",token:this._apiKey},responseType:"json",signal:this.signal},r=`${this._urlParts.root}/SceneServer`;try{const e=await o(r,t);this._rootDocument=e.data}catch{this._rootDocument={}}return this._rootDocument}async _fetchServiceOwningPortalUrl(){const t=this._parsedUrl?.path,r=t?_?.findServerInfo(t):null;if(r?.owningSystemUrl)return r.owningSystemUrl;const e=t?t.replace(/(.*\/rest)\/.*/i,"$1")+"/info":null;try{const a=(await o(e,{query:{f:"json"},responseType:"json",signal:this.signal})).data.owningSystemUrl;if(a)return a}catch(a){c(a)}return null}async _findAndLoadRelatedPortalItem(t){try{return(await t.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},{signal:this.signal})).find(r=>r.type==="Feature Service")||null}catch(r){return c(r),null}}async _loadFeatureLayerFromPortalItem(t){await t.load({signal:this.signal});const r=await this._findMatchingAssociatedSublayerUrl(t.url??"");return new d({url:r,portalItem:t}).load({signal:this.signal})}async _loadFromUrl(){const t=await this._findMatchingAssociatedSublayerUrl(`${this._urlParts?.root}/FeatureServer`);return new d({url:t}).load({signal:this.signal})}async _findMatchingAssociatedSublayerUrl(t){const r=t.replace(/^(.*FeatureServer)(\/[\d]*\/?)?$/i,"$1"),e=this._urlParts?.layerId,a=this._fetchRootDocument(),n=s=>{const y={query:{f:"json"},responseType:"json",authMode:s,signal:this.signal};return o(r,y)},m=n("anonymous").catch(()=>n("no-prompt")),[u,h]=await Promise.all([m,a]),l=h&&h.layers,i=u.data&&u.data.layers;if(!Array.isArray(i))throw new Error("expected layers array");if(Array.isArray(l)){for(let s=0;s<Math.min(l.length,i.length);s++)if(l[s].id===e)return`${r}/${i[s].id}`}else if(e!=null&&e<i.length)return`${r}/${i[e].id}`;throw new Error("could not find matching associated sublayer")}async _portalItemFromServiceItemId(){const t=(await this._fetchRootDocument()).serviceItemId;if(!t)return null;const r=new f({id:t,apiKey:this._apiKey}),e=await this._fetchServiceOwningPortalUrl();e!=null&&(r.portal=new p({url:e}));try{return r.load({signal:this.signal})}catch(a){return c(a),null}}}export{S as i};
