import{dP as w,dQ as I,dO as $,c_ as O,dR as T,jL as v,f2 as g,eY as E,bZ as f,Y as R,a2 as M,sA as L,a3 as b,p as P,e as i,y as s,eg as x,L as j,Z as F,en as N,a as J,v as q,T as U}from"./index.da161cf1.js";import{i as A}from"./APIKeyMixin.605900a3.js";import{E as k,f as _,Y as V}from"./SublayersOwner.21ae0794.js";import{l as z}from"./ArcGISService.116191b2.js";import{a as B}from"./BlendLayer.eacc4944.js";import{o as C}from"./CustomParametersMixin.244652a9.js";import{j as D}from"./PortalLayer.9c2e677f.js";import{t as G}from"./ScaleRangeLayer.1a5bb9a6.js";import{a as H}from"./TemporalLayer.5874b62b.js";import{m as K}from"./ExportImageParameters.2bba9d02.js";import{t as W}from"./imageBitmapUtils.cdd43c1c.js";import{e as S}from"./sublayerUtils.e7f91234.js";import{e as Y}from"./versionUtils.05c8a355.js";import"./portalItemUtils.ea6f2bf4.js";import"./UniqueValueRenderer.0143139a.js";import"./ColorStop.f762bde8.js";import"./diffUtils.f0876598.js";import"./colorRamps.80cb140e.js";import"./jsonUtils.4745b876.js";import"./DictionaryLoader.90c8c47c.js";import"./FieldsIndex.09813895.js";import"./heatmapUtils.32e9a30b.js";import"./sql.414b1952.js";import"./QueryTask.3d449f5b.js";import"./Query.e586665e.js";import"./executeForIds.28afd71c.js";import"./query.22cd43bf.js";import"./normalizeUtils.54c24a4d.js";import"./normalizeUtilsCommon.87227ae2.js";import"./pbfQueryUtils.c4418ce7.js";import"./pbf.82c57b62.js";import"./queryZScale.2643e684.js";import"./executeQueryJSON.640d70ab.js";import"./FeatureSet.97dc0f24.js";import"./executeQueryPBF.d6edfec1.js";import"./FeatureType.4659b5f1.js";import"./FeatureTemplate.c7eaa370.js";import"./LabelClass.1c6b8047.js";import"./defaults.83793da7.js";import"./defaultsJSON.a416f32c.js";import"./labelingInfo.990e68e3.js";import"./serviceCapabilitiesUtils.c358c66d.js";import"./AttachmentQuery.c430db32.js";import"./popupUtils.f5ffced0.js";import"./jsonUtils.1c231e28.js";import"./floorFilterUtils.2fa4f3da.js";let t=class extends B(H(G(k(_(z(w(D(I($(A(C(O(q))))))))))))){constructor(...e){super(...e),this.dateFieldsTimeReference=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeReference=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(T).then(()=>this._fetchService(r))),Promise.resolve(this)}readImageFormat(e,r){const l=r.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,l,o){if(!this.loaded||!e)return;const n=e.slice().reverse().flatten(({sublayers:p})=>p&&p.toArray().reverse()).toArray();let a=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap?.supportsDynamicLayers){const p=v(o.origin);if(p===g.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;a=S(n,c,g.SERVICE)}else if(p>g.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");a=S(n,c.sublayers,v(c.origin))}}const m=[],d={writeSublayerStructure:a,...o};let y=a;n.forEach(p=>{const c=p.write({},d);m.push(c),y=y||p.originOf("visible")==="user"}),m.some(p=>Object.keys(p).length>1)&&(r.layers=m),y&&(r.visibleLayers=n.filter(p=>p.visible).map(p=>p.id))}createExportImageParameters(e,r,l,o){const n=o&&o.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const a=new K({layer:this,floors:o?.floors,scale:E({extent:e,width:r})*n}),m=a.toJSON();a.destroy();const d=!o||!o.rotation||this.version<10.3?{}:{rotation:-o.rotation},y=e&&e.spatialReference,p=y.wkid||JSON.stringify(y.toJSON());m.dpi*=n;const c={};if(o?.timeExtent){const{start:h,end:u}=o.timeExtent.toJSON();c.time=h&&u&&h===u?""+h:`${h??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:p,imageSR:p,size:r+","+l,...m,...d,...c}}async fetchImage(e,r,l,o){const{data:n}=await this._fetchImage("image",e,r,l,o);return n}async fetchImageBitmap(e,r,l,o){const{data:n,url:a}=await this._fetchImage("blob",e,r,l,o);return W(n,a,o?.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await f(this.url,r),{extent:o,fullExtent:n,timeExtent:a}=l,m=o||n;return{fullExtent:m&&R.fromJSON(m),timeExtent:a&&M.fromJSON({start:a[0],end:a[1]})}}loadAll(){return L(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return Y(this,e)}async _fetchImage(e,r,l,o,n){const a={responseType:e,signal:n?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,l,o,n),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(a.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:a.query});try{const{data:d}=await f(m,a);return{data:d,url:m}}catch(d){throw P(d)?d:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:d})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:l}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}};i([s({type:x})],t.prototype,"dateFieldsTimeReference",void 0),i([s({type:Boolean})],t.prototype,"datesInUnknownTimezone",void 0),i([s()],t.prototype,"dpi",void 0),i([s()],t.prototype,"gdbVersion",void 0),i([s()],t.prototype,"imageFormat",void 0),i([j("imageFormat",["supportedImageFormatTypes"])],t.prototype,"readImageFormat",null),i([s({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],t.prototype,"imageMaxHeight",void 0),i([s({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],t.prototype,"imageMaxWidth",void 0),i([s()],t.prototype,"imageTransparency",void 0),i([s({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],t.prototype,"isReference",void 0),i([s({json:{read:!1,write:!1}})],t.prototype,"labelsVisible",void 0),i([s({type:["ArcGISMapServiceLayer"]})],t.prototype,"operationalLayerType",void 0),i([s({json:{read:!1,write:!1}})],t.prototype,"popupEnabled",void 0),i([s({type:x})],t.prototype,"preferredTimeReference",void 0),i([s()],t.prototype,"sourceJSON",void 0),i([s({json:{write:{ignoreOrigin:!0}}})],t.prototype,"sublayers",void 0),i([F("sublayers",{layers:{type:[V]},visibleLayers:{type:[U]}})],t.prototype,"writeSublayers",null),i([s({type:["show","hide","hide-children"]})],t.prototype,"listMode",void 0),i([s({json:{read:!1},readOnly:!0,value:"map-image"})],t.prototype,"type",void 0),i([s(N)],t.prototype,"url",void 0),t=i([J("esri.layers.MapImageLayer")],t);const Be=t;export{Be as default};
