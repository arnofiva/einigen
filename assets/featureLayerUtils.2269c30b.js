import{au as x,dj as y,sD as f,tY as E,a3 as n,tZ as L,aT as K,cw as D,bN as F,dW as R,t_ as j}from"./index.da161cf1.js";import Y from"./FeatureLayer.6ea98f03.js";import{r as _}from"./fetchService.1153b1df.js";import{o as w}from"./jsonContext.d19fd1ca.js";import{i as c,a as q,u as I,l as m}from"./portalItemUtils.ea6f2bf4.js";import"./UniqueValueRenderer.0143139a.js";import"./ColorStop.f762bde8.js";import"./diffUtils.f0876598.js";import"./colorRamps.80cb140e.js";import"./jsonUtils.4745b876.js";import"./DictionaryLoader.90c8c47c.js";import"./FieldsIndex.09813895.js";import"./heatmapUtils.32e9a30b.js";import"./sql.414b1952.js";import"./FeatureLayerBase.07ef7e55.js";import"./featureLayerUtils.0566dc37.js";import"./AttachmentQuery.c430db32.js";import"./Query.e586665e.js";import"./RelationshipQuery.60e2b826.js";import"./serviceCapabilitiesUtils.c358c66d.js";import"./editsZScale.58b9a03e.js";import"./queryZScale.2643e684.js";import"./FeatureSet.97dc0f24.js";import"./APIKeyMixin.605900a3.js";import"./ArcGISService.116191b2.js";import"./BlendLayer.eacc4944.js";import"./jsonUtils.1c231e28.js";import"./CustomParametersMixin.244652a9.js";import"./EditBusLayer.3831f0f2.js";import"./FeatureEffectLayer.a9b039ed.js";import"./FeatureEffect.ee83c7e0.js";import"./FeatureFilter.97dd33dd.js";import"./FeatureReductionLayer.9f7296a1.js";import"./LabelClass.1c6b8047.js";import"./defaults.83793da7.js";import"./defaultsJSON.a416f32c.js";import"./OrderedLayer.bbc75e49.js";import"./PortalLayer.9c2e677f.js";import"./ScaleRangeLayer.1a5bb9a6.js";import"./TemporalLayer.5874b62b.js";import"./FeatureTemplate.c7eaa370.js";import"./FeatureType.4659b5f1.js";import"./fieldProperties.174d0f24.js";import"./labelingInfo.990e68e3.js";import"./versionUtils.05c8a355.js";import"./styleUtils.a985c9a8.js";import"./TopFeaturesQuery.165d1927.js";import"./popupUtils.f5ffced0.js";const z=x.getLogger("esri.layers.FeatureLayer"),d="Feature Service";function u(a,t){return`Layer (title: ${a.title}, id: ${a.id}) of type '${a.declaredClass}' ${t}`}function g(a,t){if(t.type!==d)throw new n("feature-layer:portal-item-wrong-type",u(a,`should have portal item of type "${d}"`))}async function N(a){if(await a.load(),E(a))throw new n("feature-layer:save",u(a,"using an in-memory source cannot be saved to a portal item"))}function M(a,t){let r=(a.messages??[]).filter(({type:e})=>e==="error").map(({name:e,message:s,details:o})=>new n(e,s,o));if(t?.ignoreUnsupported&&(r=r.filter(({name:e})=>e!=="layer:unsupported"&&e!=="symbol:unsupported"&&e!=="symbol-layer:unsupported"&&e!=="property:unsupported"&&e!=="url:unsupported")),r.length>0)throw new n("feature-layer:save","Failed to save feature layer due to unsupported or invalid content. See 'details.errors' for more detailed information",{errors:r})}async function v(a,t,r){"beforeSave"in a&&typeof a.beforeSave=="function"&&await a.beforeSave();const e=a.write({},t);return M(t,r),e}function A(a){const{layer:t,layerJSON:r}=a;return t.isTable?{layers:[],tables:[r]}:{layers:[r],tables:[]}}function h(a){c(a,m.JSAPI),a.typeKeywords&&(a.typeKeywords=a.typeKeywords.filter((t,r,e)=>e.indexOf(t)===r))}function U(a){const t=a.portalItem;if(!t)throw z.error("save: requires the portalItem property to be set"),new n("feature-layer:portal-item-not-set",u(a,"requires the portalItem property to be set"));if(!t.loaded)throw new n("feature-layer:portal-item-not-loaded",u(a,"cannot be saved to a portal item that does not exist or is inaccessible"));g(a,t)}async function J(a,t){return/\/\d+\/?$/.test(a.url??"")?A(t[0]):B(a,t)}async function B(a,t){const{layer:{url:r,customParameters:e,apiKey:s}}=t[0];let o=await a.fetchData("json");o&&o.layers!=null&&o.tables!=null||(o=await C(o,{url:r??"",customParameters:e,apiKey:s},t.map(i=>i.layer.layerId)));for(const i of t)O(i.layer,i.layerJSON,o);return o}async function C(a,t,r){a||(a={}),a.layers||(a.layers=[]),a.tables||(a.tables=[]);const{url:e,customParameters:s,apiKey:o}=t,{serviceJSON:i,layersJSON:l}=await _(e,{customParameters:s,apiKey:o}),p=S(a.layers,i.layers,r),b=S(a.tables,i.tables,r);a.layers=p.itemResources,a.tables=b.itemResources;const T=[...p.added,...b.added],P=l?[...l.layers,...l.tables]:[];return await k(a,T,e,P),a}function S(a,t,r){const e=L(a,t,(o,i)=>o.id===i.id);a=a.filter(o=>!e.removed.some(i=>i.id===o.id));const s=e.added.map(({id:o})=>({id:o}));return s.forEach(({id:o})=>{a.push({id:o})}),{itemResources:a,added:s.filter(({id:o})=>!r.includes(o))}}async function k(a,t,r,e){const s=t.map(({id:o})=>new Y({url:r,layerId:o,sourceJSON:e.find(({id:i})=>i===o)}));await K(s.map(o=>o.load())),s.forEach(o=>{const{layerId:i,loaded:l,defaultPopupTemplate:p}=o;!l||p==null||O(o,{id:i,popupInfo:p.toJSON()},a)})}function O(a,t,r){a.isTable?$(r.tables,t):$(r.layers,t)}function $(a,t){if(!a)return;const r=a.findIndex(({id:e})=>e===t.id);r===-1?a.push(t):a[r]=t}function G(a){const{portalItem:t}=a;return j(a)&&!a.dynamicDataSource&&!!t?.loaded&&t.type===d}async function W(a){if(!a?.length)throw new n("feature-layer-utils-saveall:missing-parameters","'layers' array should contain at least one feature layer");await Promise.all(a.map(e=>e.load()));for(const e of a)if(!G(e))throw new n("feature-layer-utils-saveall:invalid-parameters",`'layers' array should only contain layers or tables in a feature service loaded from 'Feature Service' item. ${u(e,"does not conform")}`,{layer:e});const t=a.map(e=>e.portalItem.id);if(new Set(t).size>1)throw new n("feature-layer-utils-saveall:invalid-parameters","All layers in the 'layers' array should be loaded from the same portal item");const r=a.map(e=>e.layerId);if(new Set(r).size!==r.length)throw new n("feature-layer-utils-saveall:invalid-parameters","'layers' array should contain only one instance each of layer or table in a feature service")}function Z(a,t){let r=D.from(t);return r.id&&(r=r.clone(),r.id=null),r.type??(r.type=d),r.portal??(r.portal=F.getDefault()),g(a,r),r}async function H(a,t){const{url:r,layerId:e,title:s,fullExtent:o,isTable:i}=a,l=R(r),p=l!=null&&l.serverType==="FeatureServer";t.url=p?r:`${r}/${e}`,t.title||(t.title=s),t.extent=null,i||o==null||(t.extent=await q(o)),I(t,m.METADATA),I(t,m.MULTI_LAYER),c(t,m.SINGLE_LAYER),i&&c(t,m.TABLE),h(t)}async function Q(a,t,r){const e=a.portal;await e?.signIn(),await e?.user?.addItem({item:a,data:t,folder:r?.folder})}const Wa=y(V);async function V(a,t){await N(a),U(a);const r=a.portalItem,e=w(r),s=await v(a,e,t),o=await J(r,[{layer:a,layerJSON:s}]);return h(r),await r.update({data:o}),f(e),r}const Za=y(async(a,t)=>{await W(a);const r=a[0].portalItem,e=w(r),s=await Promise.all(a.map(i=>v(i,e,t))),o=await J(r,a.map((i,l)=>({layer:i,layerJSON:s[l]})));return h(r),await r.update({data:o}),await Promise.all(a.slice(1).map(i=>i.portalItem.reload())),f(e),r.clone()}),Ha=y(X);async function X(a,t,r){await N(a);const e=Z(a,t),s=w(e),o=A({layer:a,layerJSON:await v(a,s,r)});return await H(a,e),await Q(e,o,r),a.portalItem=e,f(s),e}export{Wa as save,Za as saveAll,Ha as saveAs};
