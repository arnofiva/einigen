import{px as p,py as m,c9 as y,jr as g,pz as w,jb as f,cd as _}from"./index.da161cf1.js";class b{constructor(){this.code=null,this.description=null}}class I{constructor(n){this.error=new b,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=n}}function d(e){return new I(e)}class v{constructor(n){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=n}}function E(e){return new v(e)}const a=new Set;function V(e,n,i,h=!1,u){a.clear();for(const r in i){const t=e.get(r);if(!t)continue;const l=i[r],s=j(t,l);if(s!==l&&u&&u.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:t,originalValue:l,sanitizedValue:s}}),a.add(t.name),t&&(h||t.editable)){const c=p(t,s);if(c)return d(m(c,t,s));n[t.name]=s}}for(const r of e?.requiredFields??[])if(!a.has(r.name))return d(`missing required field "${r.name}"`);return null}function j(e,n){let i=n;return typeof n=="string"&&y(e)?i=parseFloat(n):n!=null&&g(e)&&typeof n!="string"&&(i=String(n)),w(i)}let o;function x(e,n){if(!e||!f(n))return e;if("rings"in e||"paths"in e){if(o==null)throw new TypeError("geometry engine not loaded");return o.simplify(n,e)}return e}async function q(){return o==null&&(o=await _(()=>import("./geometryEngineJSON.70954d4c.js"),["assets/geometryEngineJSON.70954d4c.js","assets/geometryEngineBase.d1b13217.js","assets/index.da161cf1.js","assets/index.8db76e31.css","assets/geometryEngineJSON.e71e98d1.js","assets/json.7bed7e43.js"])),o}async function z(e,n){!f(e)||n!=="esriGeometryPolygon"&&n!=="esriGeometryPolyline"||await q()}export{E as c,V as d,x as h,d as u,z as y};
