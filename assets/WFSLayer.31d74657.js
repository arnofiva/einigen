import{c_ as q,dj as R,Y as S,a3 as $,J as m,aT as P,dL as C,ao as _,e as t,y as r,a as I,dJ as U,dO as E,dP as J,dQ as N,I as j,dU as F,dY as k,Q as x,dS as Y,cC as W,ej as X,Z as D,d_ as L,e0 as Q,T as b,d$ as V,e2 as M,e3 as G,e4 as z,en as B,v as Z}from"./index.da161cf1.js";import"./UniqueValueRenderer.0143139a.js";import{p as A,n as H}from"./jsonUtils.4745b876.js";import{c as K,o as ee}from"./clientSideDefaults.f7f5ffde.js";import{v as te,V as ie,Y as re,M as oe,S as se}from"./wfsUtils.54c0e0fb.js";import{d as ae}from"./FeatureSet.97dc0f24.js";import{a as ne}from"./BlendLayer.eacc4944.js";import{o as pe}from"./CustomParametersMixin.244652a9.js";import{p as le}from"./FeatureEffectLayer.a9b039ed.js";import{n as de}from"./FeatureReductionLayer.9f7296a1.js";import{c as ue}from"./OrderedLayer.bbc75e49.js";import{j as ye}from"./PortalLayer.9c2e677f.js";import{t as me}from"./ScaleRangeLayer.1a5bb9a6.js";import{a as ce}from"./TemporalLayer.5874b62b.js";import{s as fe}from"./fieldProperties.174d0f24.js";import{C as he}from"./LabelClass.1c6b8047.js";import{i as ge}from"./labelingInfo.990e68e3.js";import{b as y}from"./Query.e586665e.js";import{p as we}from"./popupUtils.f5ffced0.js";import"./ColorStop.f762bde8.js";import"./diffUtils.f0876598.js";import"./colorRamps.80cb140e.js";import"./DictionaryLoader.90c8c47c.js";import"./FieldsIndex.09813895.js";import"./heatmapUtils.32e9a30b.js";import"./QueryEngineCapabilities.a6a6a20b.js";import"./defaultsJSON.a416f32c.js";import"./geojson.91d0658d.js";import"./xmlUtils.11789372.js";import"./jsonUtils.1c231e28.js";import"./FeatureEffect.ee83c7e0.js";import"./FeatureFilter.97dd33dd.js";import"./featureLayerUtils.0566dc37.js";import"./sql.414b1952.js";import"./AttachmentQuery.c430db32.js";import"./RelationshipQuery.60e2b826.js";import"./portalItemUtils.ea6f2bf4.js";import"./defaults.83793da7.js";let d=class extends q(U){constructor(){super(...arguments),this._connection=null,this.capabilities=K(!1,!1),this.type="wfs",this.refresh=R(async e=>{await this.load();const{extent:i}=await this._connection.invoke("refresh",e);return i&&(this.sourceJSON.extent=i),{dataChanged:!0,updates:{extent:this.sourceJSON.extent}}})}load(e){const i=e!=null?e.signal:null;return this.addResolvingPromise(this._startWorker({signal:i})),Promise.resolve(this)}destroy(){this._connection?.close(),this._connection=null}async openPorts(){return await this.load(),this._connection.openPorts()}async queryFeatures(e,i={}){await this.load(i);const s=await this._connection.invoke("queryFeatures",e?e.toJSON():null,i);return ae.fromJSON(s)}async queryFeaturesJSON(e,i={}){return await this.load(i),this._connection.invoke("queryFeatures",e?e.toJSON():null,i)}async queryFeatureCount(e,i={}){return await this.load(i),this._connection.invoke("queryFeatureCount",e?e.toJSON():null,i)}async queryObjectIds(e,i={}){return await this.load(i),this._connection.invoke("queryObjectIds",e?e.toJSON():null,i)}async queryExtent(e,i={}){await this.load(i);const s=await this._connection.invoke("queryExtent",e?e.toJSON():null,i);return{count:s.count,extent:S.fromJSON(s.extent)}}async querySnapping(e,i={}){return await this.load(i),this._connection.invoke("querySnapping",e,i)}async _createLoadOptions(e){const{url:i,customParameters:s,name:n,namespaceUri:p,spatialReference:a,fields:u,geometryType:c,swapXY:f}=this.layer;if(!i)throw new $("wfs-layer:missing-url","WFSLayer must be created with a url");this.wfsCapabilities||(this.wfsCapabilities=await te(i,{customParameters:s,...e}));const h=["fields","geometryType","name","namespaceUri","spatialReference","swapXY"].some(w=>this.layer[w]==null),l=h?await ie(this.wfsCapabilities,n,p,{spatialReference:a,customParameters:s,signal:e?.signal}):{...re(u??[]),geometryType:c,name:n,namespaceUri:p,spatialReference:a,swapXY:f},g=oe(this.wfsCapabilities.readFeatureTypes(),l.name,l.namespaceUri),T=m.toJSON(l.geometryType);return{customParameters:s,featureType:g,fields:l.fields?.map(w=>w.toJSON())??[],geometryField:l.geometryField,geometryType:T,getFeatureUrl:this.wfsCapabilities.operations.GetFeature.url,getFeatureOutputFormat:this.wfsCapabilities.operations.GetFeature.outputFormat,objectIdField:l.objectIdField,spatialReference:l.spatialReference.toJSON(),swapXY:!!l.swapXY}}async _startWorker(e){const[i,s]=await P([this._createLoadOptions(e),C("WFSSourceWorker",{...e,strategy:_("feature-layers-workers")?"dedicated":"local"})]),n=i.error||s.error||null,p=s.value||null;if(n)throw p&&p.close(),n;const a=i.value;this._connection=s.value;const u=(await this._connection.invoke("load",a,e)).extent;this.sourceJSON={extent:u,fields:a.fields,geometryType:a.geometryType,objectIdField:a.objectIdField,geometryField:a.geometryField,drawingInfo:ee(a.geometryType),name:a.featureType.title,wfsInfo:{name:a.featureType.name,featureUrl:a.getFeatureUrl,maxFeatures:3e3,swapXY:a.swapXY,supportedSpatialReferences:a.featureType.supportedSpatialReferences,version:"2.0.0",wfsNamespace:a.featureType.namespaceUri}}}};t([r()],d.prototype,"capabilities",void 0),t([r({constructOnly:!0})],d.prototype,"layer",void 0),t([r()],d.prototype,"sourceJSON",void 0),t([r()],d.prototype,"type",void 0),t([r()],d.prototype,"wfsCapabilities",void 0),d=t([I("esri.layers.graphics.sources.WFSSource")],d);var v;const O=fe();let o=v=class extends ue(pe(de(le(ne(ce(E(me(J(ye(N(Z))))))))))){static fromWFSLayerInfo(e){const{customParameters:i,fields:s,geometryField:n,geometryType:p,name:a,namespaceUri:u,objectIdField:c,spatialReference:f,swapXY:h,url:l,wfsCapabilities:g}=e;return new v({customParameters:i,fields:s,geometryField:n,geometryType:p,name:a,namespaceUri:u,objectIdField:c,spatialReference:f,swapXY:h,url:l,wfsCapabilities:g})}constructor(e){super(e),this.copyright=null,this.customParameters=null,this.definitionExpression=null,this.displayField=null,this.elevationInfo=null,this.featureUrl=void 0,this.fields=null,this.fieldsIndex=null,this.fullExtent=null,this.geometryType=null,this.labelsVisible=!0,this.labelingInfo=null,this.legendEnabled=!0,this.objectIdField=null,this.operationalLayerType="WFS",this.maxFeatures=3e3,this.mode=0,this.name=null,this.namespaceUri=null,this.outFields=null,this.popupEnabled=!0,this.popupTemplate=null,this.screenSizePerspectiveEnabled=!0,this.source=new d({layer:this}),this.spatialReference=j.WGS84,this.spatialReferences=[4326],this.swapXY=void 0,this.title="WFS",this.type="wfs",this.url=null,this.version=void 0}destroy(){this.source?.destroy()}load(e){return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["WFS"]},e).then(()=>this.source.load(e)).then(()=>{this.read(this.source.sourceJSON,{origin:"service",url:this.parsedUrl}),this.revert(["objectIdField","fields","timeInfo","spatialReference","name","namespaceUri"],"service"),F(this.renderer,this.fieldsIndex),k(this.timeInfo,this.fieldsIndex)})),Promise.resolve(this)}get capabilities(){return this.source?.capabilities}get createQueryVersion(){return this.commitProperty("definitionExpression"),this.commitProperty("timeExtent"),this.commitProperty("timeOffset"),this.commitProperty("geometryType"),this.commitProperty("capabilities"),(this._get("createQueryVersion")||0)+1}get defaultPopupTemplate(){return this.createPopupTemplate()}writeFields(e,i,s){const n=e.filter(p=>p.name!==se);this.geometryField&&n.unshift(new x({name:this.geometryField,alias:this.geometryField,type:"geometry"})),Y(s,n.map(p=>p.toJSON()),i)}get parsedUrl(){return W(this.url)}set renderer(e){F(e,this.fieldsIndex),this._set("renderer",e)}get wfsCapabilities(){return this.source?.wfsCapabilities}set wfsCapabilities(e){this.source&&(this.source.wfsCapabilities=e)}createPopupTemplate(e){return we(this,e)}createQuery(){const e=new y;e.returnGeometry=!0,e.outFields=["*"],e.where=this.definitionExpression||"1=1";const{timeOffset:i,timeExtent:s}=this;return e.timeExtent=i!=null&&s!=null?s.offset(-i.value,i.unit):s||null,e}getFieldDomain(e,i){return this.getField(e)?.domain}getField(e){return this.fieldsIndex?.get(e)}queryFeatures(e,i){return this.load().then(()=>this.source.queryFeatures(y.from(e)||this.createQuery(),i)).then(s=>{if(s?.features)for(const n of s.features)n.layer=n.sourceLayer=this;return s})}queryObjectIds(e,i){return this.load().then(()=>this.source.queryObjectIds(y.from(e)||this.createQuery(),i))}queryFeatureCount(e,i){return this.load().then(()=>this.source.queryFeatureCount(y.from(e)||this.createQuery(),i))}queryExtent(e,i){return this.load().then(()=>this.source.queryExtent(y.from(e)||this.createQuery(),i))}async hasDataChanged(){try{const{dataChanged:e,updates:i}=await this.source.refresh(this.customParameters);return i!=null&&this.read(i,{origin:"service",url:this.parsedUrl,ignoreDefaults:!0}),e}catch{}return!1}};t([r({readOnly:!0})],o.prototype,"capabilities",null),t([r({type:String})],o.prototype,"copyright",void 0),t([r({readOnly:!0})],o.prototype,"createQueryVersion",null),t([r({json:{name:"wfsInfo.customParameters",write:{overridePolicy:e=>({enabled:!!(e&&Object.keys(e).length>0),ignoreOrigin:!0})}}})],o.prototype,"customParameters",void 0),t([r({readOnly:!0})],o.prototype,"defaultPopupTemplate",null),t([r({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],o.prototype,"definitionExpression",void 0),t([r({type:String})],o.prototype,"displayField",void 0),t([r(X)],o.prototype,"elevationInfo",void 0),t([r({type:String,readOnly:!0,json:{name:"wfsInfo.featureUrl",write:{ignoreOrigin:!0,isRequired:!0}}})],o.prototype,"featureUrl",void 0),t([r({type:[x],json:{name:"layerDefinition.fields",write:{ignoreOrigin:!0,isRequired:!0},origins:{service:{name:"fields"}}}})],o.prototype,"fields",void 0),t([D("fields")],o.prototype,"writeFields",null),t([r(O.fieldsIndex)],o.prototype,"fieldsIndex",void 0),t([r({type:S,json:{name:"extent"}})],o.prototype,"fullExtent",void 0),t([r()],o.prototype,"geometryField",void 0),t([r({type:String,json:{read:{source:"layerDefinition.geometryType",reader:m.read},write:{target:"layerDefinition.geometryType",writer:m.write,ignoreOrigin:!0},origins:{service:{read:m.read}}}})],o.prototype,"geometryType",void 0),t([r({type:String})],o.prototype,"id",void 0),t([r(L)],o.prototype,"labelsVisible",void 0),t([r({type:[he],json:{name:"layerDefinition.drawingInfo.labelingInfo",read:{reader:ge},write:!0}})],o.prototype,"labelingInfo",void 0),t([r(Q)],o.prototype,"legendEnabled",void 0),t([r({type:["show","hide"]})],o.prototype,"listMode",void 0),t([r({type:String})],o.prototype,"objectIdField",void 0),t([r({type:["WFS"]})],o.prototype,"operationalLayerType",void 0),t([r({type:b,json:{name:"wfsInfo.maxFeatures",write:{ignoreOrigin:!0,isRequired:!0}}})],o.prototype,"maxFeatures",void 0),t([r({type:[0],readOnly:!0,json:{origins:{"web-map":{write:{ignoreOrigin:!0,isRequired:!0}}}}})],o.prototype,"mode",void 0),t([r({type:String,json:{name:"wfsInfo.name",write:{ignoreOrigin:!0,isRequired:!0}}})],o.prototype,"name",void 0),t([r({type:String,json:{name:"wfsInfo.wfsNamespace",write:{ignoreOrigin:!0,isRequired:!0}}})],o.prototype,"namespaceUri",void 0),t([r(V)],o.prototype,"opacity",void 0),t([r(O.outFields)],o.prototype,"outFields",void 0),t([r({readOnly:!0})],o.prototype,"parsedUrl",null),t([r(M)],o.prototype,"popupEnabled",void 0),t([r({type:G,json:{name:"popupInfo",write:!0}})],o.prototype,"popupTemplate",void 0),t([r({types:A,json:{origins:{service:{name:"drawingInfo.renderer"},"web-scene":{types:H,name:"layerDefinition.drawingInfo.renderer",write:!0}},name:"layerDefinition.drawingInfo.renderer",write:{ignoreOrigin:!0}}})],o.prototype,"renderer",null),t([r(z)],o.prototype,"screenSizePerspectiveEnabled",void 0),t([r({readOnly:!0})],o.prototype,"source",void 0),t([r({type:j,json:{name:"layerDefinition.spatialReference",write:{ignoreOrigin:!0,isRequired:!0},origins:{service:{name:"extent.spatialReference"}}}})],o.prototype,"spatialReference",void 0),t([r({readOnly:!0,type:[b],json:{name:"wfsInfo.supportedSpatialReferences",write:{ignoreOrigin:!0,isRequired:!0}}})],o.prototype,"spatialReferences",void 0),t([r({type:Boolean,value:!1,json:{name:"wfsInfo.swapXY",write:{ignoreOrigin:!0,isRequired:!0}}})],o.prototype,"swapXY",void 0),t([r({json:{write:{ignoreOrigin:!0,isRequired:!0},origins:{service:{name:"name"}}}})],o.prototype,"title",void 0),t([r({json:{read:!1},readOnly:!0})],o.prototype,"type",void 0),t([r(B)],o.prototype,"url",void 0),t([r({type:String,readOnly:!0,json:{name:"wfsInfo.version",write:{ignoreOrigin:!0,isRequired:!0}}})],o.prototype,"version",void 0),t([r()],o.prototype,"wfsCapabilities",null),o=v=t([I("esri.layers.WFSLayer")],o);const rt=o;export{rt as default};
