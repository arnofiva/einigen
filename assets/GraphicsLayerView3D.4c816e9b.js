import{aN as l,l as h,a3 as c,C as d,e as i,y as t,a as u}from"./index.da161cf1.js";import{n as m}from"./LayerView3D.a0f4cfd4.js";import{f as g,r as y}from"./queryForSymbologySnapping.b7a5beb4.js";import{x as f}from"./GraphicsProcessor.f6fb4329.js";import{l as b}from"./projectExtentUtils.4a1e869d.js";import{d as v}from"./LayerView.948860d4.js";import"./elevationInfoUtils.d710f6c5.js";import"./diffUtils.f0876598.js";import"./Query.e586665e.js";import"./Graphics3DObjectStates.1983c1d0.js";import"./UniqueValueRenderer.0143139a.js";import"./ColorStop.f762bde8.js";import"./colorRamps.80cb140e.js";import"./jsonUtils.4745b876.js";import"./DictionaryLoader.90c8c47c.js";import"./FieldsIndex.09813895.js";import"./heatmapUtils.32e9a30b.js";import"./defaults.83793da7.js";import"./defaultsJSON.a416f32c.js";import"./optimizedFeatureQueryEngineAdapter.b17e3ee2.js";import"./centroid.66ea1f85.js";import"./PooledRBush.b9188fbe.js";import"./quickselect.b8e0afc3.js";import"./popupUtils.5174221c.js";let s=class extends m(v){constructor(){super(...arguments),this.type="graphics-3d",this.symbologySnappingSupported=!0,this._slicePlaneEnabled=!1,this.fullExtentInLocalViewSpatialReference=null,this.ignoresMemoryFactor=!0}initialize(){this._set("processor",new f({owner:this,scaleVisibilityEnabled:!0,frustumVisibilityEnabled:!0})),this.addResolvingPromise(this.processor.initializePromise),this.handles.add(this.layer.on("graphic-update",e=>this.processor.graphicsCore.graphicUpdateHandler(e))),this.addResolvingPromise(b(this).then(e=>this.fullExtentInLocalViewSpatialReference=e)),this.layer.internal?this.notifyChange("updating"):this.handles.add(l(()=>this.view?.basemapTerrain?.ready,()=>()=>this.notifyChange("updating"),{once:!0}))}destroy(){this.handles.removeAll(),this.updatingHandles.removeAll(),this._set("processor",h(this.processor))}get loadedGraphics(){return this.layer.graphics}get legendEnabled(){return this.canResume()&&!this.processor?.frustumVisibilitySuspended}get slicePlaneEnabled(){const e=this.layer.internal;return this._slicePlaneEnabled&&!e}set slicePlaneEnabled(e){this._slicePlaneEnabled=e}getSuspendInfo(){const e=super.getSuspendInfo();return e.outsideScaleRange=this.processor?.scaleVisibilitySuspended??!1,e.outsideOfView=this.processor?.frustumVisibilitySuspended??!1,e}async fetchPopupFeatures(e,r){return r?.clientGraphics??[]}getHit(e){return this.processor.getHit(e)}whenGraphicBounds(e,r){return this.processor.whenGraphicBounds(e,r)}computeAttachmentOrigin(e,r){return this.processor?.computeAttachmentOrigin(e,r)}getSymbolLayerSize(e,r){return this.processor.getSymbolLayerSize(e,r)}queryGraphics(){return Promise.resolve(this.loadedGraphics)}maskOccludee(e){return this.processor.maskOccludee(e)}highlight(e){return this.processor.highlight(e)}async elevationAlignPointsInFeatures(e,r){const{processor:o}=this;if(o==null||o.graphics3DGraphics==null)throw new c("graphicslayerview3d:missing-processor","A Graphics3D processor is needed to resolve graphics elevation.");const{graphics3DGraphics:n}=o,p=a=>typeof a=="number"?n.get(a):void 0;return g(this.view,this.layer,p,e,r)}async queryForSymbologySnapping(e,r){return y(this.processor,e,r)}get updatePolicy(){return this.processor?.graphicsCore.effectiveUpdatePolicy||d.SYNC}canResume(){return super.canResume()&&!this.processor?.scaleVisibilitySuspended}isUpdating(){return this.view&&this.layer&&!(!this.processor?.updating&&(this.layer.internal||this.view.basemapTerrain?.ready))}get performanceInfo(){return{displayedNumberOfFeatures:this.loadedGraphics.length,maximumNumberOfFeatures:-1,totalNumberOfFeatures:-1,nodes:0,core:null,updating:this.updating,elevationUpdating:this.processor?.elevationAlignment.updating??!1,visibilityFrustum:!this.processor?.frustumVisibilitySuspended}}get usedMemory(){return this.processor?.graphicsCore?.usedMemory??0}get unloadedMemory(){return this.processor?.graphicsCore?.unprocessedMemoryEstimate}};i([t()],s.prototype,"loadedGraphics",null),i([t({readOnly:!0})],s.prototype,"legendEnabled",null),i([t()],s.prototype,"layer",void 0),i([t({readOnly:!0})],s.prototype,"processor",void 0),i([t()],s.prototype,"_slicePlaneEnabled",void 0),i([t({type:Boolean})],s.prototype,"slicePlaneEnabled",null),s=i([u("esri.views.3d.layers.GraphicsLayerView3D")],s);const q=s;export{q as default};
