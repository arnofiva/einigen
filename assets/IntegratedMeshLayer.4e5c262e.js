import{ol as g,V as S,cC as w,bZ as O,e as i,y as r,a as h,dP as T,dQ as _,t as L,aO as x,U as I,bO as N,dR as $,a3 as d,L as M,ej as b,v as j}from"./index.da161cf1.js";import{g as A}from"./persistable.2f8a3a21.js";import{i as V}from"./APIKeyMixin.605900a3.js";import{l as D}from"./ArcGISService.116191b2.js";import{j as J}from"./PortalLayer.9c2e677f.js";import{t as K}from"./ScaleRangeLayer.1a5bb9a6.js";import{N as P,K as c}from"./SceneService.40f5c1fa.js";import{s as U,l as R,u as E,m as z}from"./I3SLayerDefinitions.0628cd13.js";import{f as y}from"./SceneModification.98a0e780.js";import"./resourceExtension.748c0ef1.js";import"./portalItemUtils.ea6f2bf4.js";import"./I3SIndexInfo.9cdb77bc.js";var a;let n=a=class extends g(S.ofType(y)){constructor(e){super(e),this.url=null}clone(){return new a({url:this.url,items:this.items.map(e=>e.clone())})}toJSON(e){return this.toArray().map(o=>o.toJSON(e)).filter(o=>!!o.geometry)}static fromJSON(e,o){const s=new a;for(const p of e)s.add(y.fromJSON(p,o));return s}static async fromUrl(e,o,s){const p={url:w(e),origin:"service"},u=await O(e,{responseType:"json",signal:s?.signal}),v=o.toJSON(),l=[];for(const m of u.data)l.push(y.fromJSON({...m,geometry:{...m.geometry,spatialReference:v}},p));return new a({url:e,items:l})}};i([r({type:String})],n.prototype,"url",void 0),n=a=i([h("esri.layers.support.SceneModifications")],n);const f=n;let t=class extends P(D(T(J(K(_(V(j))))))){constructor(...e){super(...e),this._handles=new L,this.geometryType="mesh",this.operationalLayerType="IntegratedMeshLayer",this.type="integrated-mesh",this.nodePages=null,this.materialDefinitions=null,this.textureSetDefinitions=null,this.geometryDefinitions=null,this.serviceUpdateTimeStamp=null,this.profile="mesh-pyramids",this.modifications=null,this._modificationsSource=null,this.elevationInfo=null,this.path=null}destroy(){this._handles.destroy()}initialize(){this._handles.add(x(()=>this.modifications,"after-changes",()=>this.modifications=this.modifications,I))}normalizeCtorArgs(e,o){return typeof e=="string"?{url:e,...o}:e}readModifications(e,o,s){this._modificationsSource={url:N(e,s),context:s}}async load(e){return this.addResolvingPromise(this._doLoad(e)),this}async _doLoad(e){const o=e?.signal;try{await this.loadFromPortal({supportedTypes:["Scene Service"]},e)}catch(s){$(s)}if(await this._fetchService(o),this._modificationsSource!=null){const s=await f.fromUrl(this._modificationsSource.url,this.spatialReference,e);this.setAtOrigin("modifications",s,this._modificationsSource.context.origin),this._modificationsSource=null}await this._fetchIndexAndUpdateExtent(this.nodePages,o)}beforeSave(){if(this._modificationsSource!=null)return this.load().then(()=>{},()=>{})}async saveAs(e,o){return this._debouncedSaveOperations(c.SAVE_AS,{...o,getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"integrated-mesh"},e)}async save(){const e={getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"integrated-mesh"};return this._debouncedSaveOperations(c.SAVE,e)}validateLayer(e){if(e.layerType&&e.layerType!=="IntegratedMesh")throw new d("integrated-mesh-layer:layer-type-not-supported","IntegratedMeshLayer does not support this layer type",{layerType:e.layerType});if(isNaN(this.version.major)||isNaN(this.version.minor))throw new d("layer:service-version-not-supported","Service version is not supported.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"});if(this.version.major>1)throw new d("layer:service-version-too-new","Service version is too new.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"})}_getTypeKeywords(){return["IntegratedMeshLayer"]}};i([r({type:String,readOnly:!0})],t.prototype,"geometryType",void 0),i([r({type:["show","hide"]})],t.prototype,"listMode",void 0),i([r({type:["IntegratedMeshLayer"]})],t.prototype,"operationalLayerType",void 0),i([r({json:{read:!1},readOnly:!0})],t.prototype,"type",void 0),i([r({type:U,readOnly:!0})],t.prototype,"nodePages",void 0),i([r({type:[R],readOnly:!0})],t.prototype,"materialDefinitions",void 0),i([r({type:[E],readOnly:!0})],t.prototype,"textureSetDefinitions",void 0),i([r({type:[z],readOnly:!0})],t.prototype,"geometryDefinitions",void 0),i([r({readOnly:!0})],t.prototype,"serviceUpdateTimeStamp",void 0),i([r({type:f}),A({origins:["web-scene","portal-item"],type:"resource",prefix:"modifications"})],t.prototype,"modifications",void 0),i([M(["web-scene","portal-item"],"modifications")],t.prototype,"readModifications",null),i([r(b)],t.prototype,"elevationInfo",void 0),i([r({type:String,json:{origins:{"web-scene":{read:!0,write:!0},"portal-item":{read:!0,write:!0}},read:!1}})],t.prototype,"path",void 0),t=i([h("esri.layers.IntegratedMeshLayer")],t);const ee=t;export{ee as default};
